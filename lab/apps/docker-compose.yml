version: '3'
services:
  #Sobre o Zookeeper: https://dattell.com/data-architecture-blog/what-is-zookeeper-how-does-it-support-kafka/
  #Detalhes das vari√°veis de ambiente:
  #Zookeper: https://hub.docker.com/_/zookeeper
  # PRONTO ZOOKEEPER
  zookeeper:
    image: zookeeper:3.4.9
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    networks:
      - loja
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./kafka/data/zookeeper/data:/data
      - ./kafka/data/zookeeper/datalog:/datalog
  #Kafka: https://docs.confluent.io/platform/current/kafka/multi-node.html
  # PRONTO KAFKA
  kafka:
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka
    container_name: kafka
    ports:
      - '9092:9092'
    expose:
      - '9092'
    networks:
      - loja
    environment:
      # KAFKA_ADVERTISED_HOST_NAME: teste
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka/data/kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
  #Kafdrop: https://github.com/obsidiandynamics/kafdrop
  # PRONTO KAFDROP
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: 'no'
    ports:
      - '9000:9000'
    networks:
      - loja
    environment:
      KAFKA_BROKERCONNECT: 'kafka:19092'
    depends_on:
      - kafka
  #bitnami/spark: https://hub.docker.com/r/bitnami/spark
  # PRONTO SPARK
  spark-master:
    image: bitnami/spark:3.5.1
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - '8080:8080'
      - '7077:7077'
      - '4040:4040'
  spark-worker-1:
    image: bitnami/spark:3.5.1
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
      SPARK_MASTER_URL: spark://spark-master:7077
  spark-worker-2:
    image: bitnami/spark:3.5.1
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
      SPARK_MASTER_URL: spark://spark-master:7077
  # PRONTO MYSQL
  mysql:
    image: mysql:8.3.0
    hostname: mysql
    container_name: mysql
    ports:
      - '3306:3306'
    expose:
      - '3306'
    networks:
      - loja
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./mysql/data:/mysql/data
      - ./mysql/schema.sql:/docker-entrypoint-initdb.d/schema.sql
  # PRONTO LOJA SIMULADA
  loja_simulada:
    image: loja_simulada_image
    hostname: loja_simulada
    container_name: loja_simulada
    ports:
      - '30001:30001'
    networks:
      - loja
    environment:
      LOJA_SIMULADA_PORTA: 30001
      DB_HOST: mysql
      DB_USER: root
      DB_PASS: root
      DB_NAME: vendas
      KAFKA_BROKERCONNECT: 'kafka:19092'
    command: npm run start
    restart: always
    depends_on:
      - mysql
      - kafka
    links:
      - mysql
      - kafka
  # PRONTO API DASHBOARD
  api_dashboard:
    image: api_dashboard_imagem
    hostname: api_dashboard
    container_name: api_dashboard
    ports:
      - 4000:4000
    networks:
      - loja
    environment:
      API_DASHBOARD: 'api_dashboard:4000'
      KAFKA_CLIENTE_ID: 'dashboards-consumer'
      KAFKA_GRUPO: 'dashboards-consumer'
      KAFKA_TOPICOS: 'vendas-deshboard-gold'
      KAFKA_BROKERCONNECT: 'kafka:19092'
    command: npm run start
    restart: always
    depends_on:
      - kafka
    links:
      - kafka

  dashboard:
    image: dashboard_imagem
    hostname: dashboard
    container_name: dashboard
    ports:
      - 5000:5000
    networks:
      - loja
    environment:
      REACT_APP_API_DASHBOARD: 'localhost:4000'
      PORT: 5000
    command: npm run start
    restart: always
    depends_on:
      - api_dashboard
    links:
      - api_dashboard

  prometheus:
    image: prom/prometheus
    hostname: prometheus
    container_name: prometheus
    volumes:
      - "./observabilidade/prometheus.yml:/etc/prometheus/prometheus.yml"
    networks:
      - loja
    ports:
      - 9090:9090
    depends_on:
      - api_dashboard
    links:
      - api_dashboard

  grafana:
    image: grafana/grafana
    container_name: grafana
    hostname: grafana
    environment:
      -  GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    ports:
      - 3000:3000
    networks:
      - loja
    links:
      - prometheus

networks:
  loja:
    driver: bridge


# docker compose down --rmi all -v --remove-orphans